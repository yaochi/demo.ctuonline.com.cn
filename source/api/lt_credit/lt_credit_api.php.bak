<?php

define('LT_CREDIT_ROOT', dirname(__FILE__).DIRECTORY_SEPARATOR);

//配置文件
include_once(dirname(dirname(__FILE__)).'/common/config_lt_msg.php');

//mssqlserver数据库操作文件
include_once(LT_CREDIT_ROOT.'./db/mssql_class_lt.php');

define('RT_SUCCESS',0);	//操作成功
define('RT_FAIL',1); 	//操作失败

set_time_limit(0);//本函数用来配置该页最久执行时间。若配置为0则不限定最久时间

class credit_lt {
	
	private $mssql4zh ;//mssql数据库链接类

	/**
	 * 构造函数  
	 */
	function credit_lt() {
		
	}

	/**
	 * 规则积分调用接口，调用该接口，获得积分
	 * 
	 * @param uid：sso用户id
	 * @param action：时间代码，详见附表
	 * @param
	 *            resourceId：去重信息id，一些信息要防止重复
	 *            例如：针对同一日志多次发表评论，只允许获得一次积分，这里的resourceId就是日志ID。
	 * @return 返回获得的积分，奖励则为正分，惩罚则为负分
	 */
	public function createCreditLog($uid, $action, $resourceId){
		
		global $tname_lt;
		
		$credit=0;
		
		if(0==$uid){
			throw new Exception("规则积分调用接口出错了，原因是未传入uid！");
		}
		if(""==$action){
			throw new Exception("规则积分调用接口出错了，原因是未传入action！");
		}
		
		$creditRule_sql="select * from ".$tname_lt['LTCREDIT_RULE']." where action='".$action."'";
		$creditLog_sql="select * from ".$tname_lt['LTCREDIT_LOG']." where action='".$action."' and uid='".$uid."'" ;
		
		//初始化mssql数据库链接
		if(empty($this->mssql4zh)){
			$this->mssql4zh=new mssql4lt(); 
		}
		
		//获取积分日志和积分规则
		$creditRule_query=$this->mssql4zh->Query($creditRule_sql);
		$creditLog_query=$this->mssql4zh->Query($creditLog_sql);
		$creditLog = $this->mssql4zh->GetRow($creditLog_query);
		$creditRule = $this->mssql4zh->GetRow($creditRule_query);
		
		//如果积分规则不存在，则返回调用接口失败
		if(empty($creditRule)){
			throw new Exception("积分接口调用失败，原因为传入的事件代码不存在！");
		}
		
		//不存在积分日志
		if(empty($creditLog)){
			$values=array("uid"=>$uid,"ruleid"=>$creditRule['id'],"action"=>$action,"total"=>1,"cycleNum"=>1);
						
			//奖励
			if("1"==$creditRule['rewardType']){
				$values["credit"]=$creditRule["credit"];
				$values["experience"]=$creditRule["experience"];
				$credit=$creditRule['credit'];
			}
			//惩罚
			else{
				$values["credit"]=$creditRule["credit"]*(-1);
				$values["experience"]=$creditRule["experience"]*(-1);
				$credit=$creditRule['credit']*(-1);
			}
			$values["startTime"]=time()*1000;
			$values["dateLine"]=time()*1000;
			$values["rewardType"]=$creditRule['rewardType'];
			$values["appids"]="";
			$values["userids"]="";
			$values["infoids"]="";
			
			//去重:第一次一定不会重复，调用该方法的目的是为了添加重复的id
			$this->getCheckCheating(&$values,&$creditRule,$resourceId);
			//保存积分日志
			$this->mssql4zh->Insert($tname_lt['LTCREDIT_LOG'],$values);
		}else{			
			//根据周期规则，判断是否应该获得积分：true-获得，false-不获得
			$flag=$this->checkCycle(&$creditLog,&$creditRule,$resourceId);
			
			if($flag){
				//奖励
				if("1"==$creditRule['rewardType'])
					$credit=$creditRule['credit'];
				//惩罚
				else
					$credit=$creditRule['credit']*(-1);
					
				//更新积分日志
				$update_credit_log="update ".$tname_lt['LTCREDIT_LOG']." set ";
				$update_credit_log.=(" total=".$creditLog['total'].", ");
				$update_credit_log.=(" cycleNum=".$creditLog['cycleNum'].", ");
				$update_credit_log.=(" credit=".$creditLog['credit'].", ");
				$update_credit_log.=(" experience=".$creditLog['experience'].", ");
				$update_credit_log.=(" startTime=".$creditLog['startTime'].", ");
				$update_credit_log.=(" dateLine=".$creditLog['dateLine'].", ");
				$update_credit_log.=(" appids='".$creditLog['appids']."', ");
				$update_credit_log.=(" userids='".$creditLog['userids']."', ");
				$update_credit_log.=(" infoids='".$creditLog['infoids']."' ");
				$update_credit_log.=(" where uid='".$uid."' and ruleid='".$creditRule['id']."' ");
				$this->mssql4zh->Query($update_credit_log);
			}
		}	
		if($credit!=0){
			//更改用户总积分
			$update_user_total_credit="update common_user set credit=credit+(".$credit.") where id='".$uid."'";
			$this->mssql4zh->Query($update_user_total_credit);
		}
		
		$this->mssql4zh->Close();
		$this->mssql4zh=null;
		return 	$credit;
	}

	/**
	 * 根据用户id获取用户总积分
	 * 
	 * @param uid：sso用户id
	 * @return 总积分
	 */
	public function getTotalCreditByUid($uid){
		
		if(!isset($uid)){
			throw new Exceptoin("获取用户的积分出错了，uid不可为空！");
		}
		
		$credit=0;
		//初始化mssql数据库链接
		if(empty($this->mssql4zh)){
			$this->mssql4zh=new mssql4lt();
		}
		
		$sql = " select credit from common_user  where id='".$uid."'";
		$query=$this->mssql4zh->Query($sql);
		while($row=$this->mssql4zh->GetRow($query)){
			$credit = $row['credit'];
		}
		
		$this->mssql4zh->Close();
		$this->mssql4zh=null;
		
		return $credit;
	}
	
	/**
	 * 根据用户id查询用户所有积分日志
	 * 
	 * @param uid：sso用户id
	 * @return 积分日志列表
	 */
	public function getCreditLogsByUid($uid){
		global $tname_lt;
		
		if(!isset($uid)){
			throw new Exceptoin("获取积分日志出错了，uid不可为空！");
		}
		
		$creditLog= array();
		$num = 0;
		
		//初始化mssql数据库链接
		if(empty($this->mssql4zh)){
			$this->mssql4zh=new mssql4lt();
		}
		
		$sql = " select * from ".$tname_lt['LTCREDIT_LOG']."  where uid='".$uid."'";
		$query=$this->mssql4zh->Query($sql);
		while($row= mssql_fetch_array($query)){
			$creditLog[$num++] = $row;
		}
		
		$this->mssql4zh->Close();
		$this->mssql4zh=null;
		
		return $creditLog;
	}

	/**
	 * 根据事件代码查询积分规则
	 * 
	 * @param action：事件代码，详见附件
	 * @return 积分规则实体
	 */
	public function getCreditRuleByAction($action){
		
		global $tname_lt;
		
		if(!isset($action)){
			throw new Exceptoin("获取积分规则出错了，action不可为空！");
		}
		
		$creditRule= array();
		
		//初始化mssql数据库链接
		if(empty($this->mssql4zh)){
			$this->mssql4zh=new mssql4lt();
		}
		
		$sql = " select * from ".$tname_lt['LTCREDIT_RULE']."  where action='".$action."'";
		$query=$this->mssql4zh->Query($sql);
		$creditRule= $this->mssql4zh->GetRow($query);
		
		$this->mssql4zh->Close();
		$this->mssql4zh=null;
		
		return $creditRule;
	}
	
	/**
	 * 判断是否去重，返回true表示重复，需要去重，返回false表示不存在重复或者无须去重
	 * 
	 * @param $creditLog：积分日志
	 * @param $creditLog：积分规则
	 * @param $creditLog：去重id
	 * @return true or false
	 */
	private function getCheckCheating($creditLog,$creditRule,$resourceId){
		$result=false;
		
		//无需做去重校验
		if("0"==$creditRule["norepeat"])
			return $result;
		if("0"!=$creditRule["norepeat"] && empty($resourceId)){
			throw new Exception("积分接口调用出错了，需要去掉重复的id为空！");
		}
		
		//0：不去重 1：针对信息去重 2：针对用户去重 3：针对应用去重
		switch($creditRule["norepeat"]){
			case "0":
			{
				$result=false;
			}
				break;
			case "1":
			{
				if(!empty($creditLog["infoids"])){
					if(strstr($creditLog["infoids"],$resourceId.","))
						$result=true;
				}
				if(!$result)
					$creditLog["infoids"].=($resourceId.",");
			}
				break;
			case "2":
			{
				if(!empty($creditLog["userids"])){
					if(strstr($creditLog["userids"],$resourceId.","))
						$result=true;
				}
				if(!$result)
					$creditLog["userids"].=($resourceId.",");
			}
				break;
			case "3":
			{
				if(!empty($creditLog["appids"])){
					if(strstr($creditLog["appids"],$resourceId.","))
						$result=true;
				}
				if(!$result)
					$creditLog["appids"].=($resourceId.",");
			}
				break;
		}
		
		return $result;
	}
	
	/**
	 * 通过周期判断是否添加积分
	 * 
	 * @param $creditLog：积分日志
	 * @param $creditLog：积分规则
	 * @param $creditLog：去重id
	 * @return true or false
	 */
	private function checkCycle($creditLog,$creditRule,$resourceId){
		$result=false;
		$insideCycle=false;
		
		//奖励
		if("1"==$creditRule['rewardType']){
			$curTime=time()*1000;//当前时间
			$startTime=$creditLog['startTime'];//本周内第一次奖励时间
			$lastTime=$creditLog['dateLine'];//最后一次奖励时间
			
			//奖励周期： 0：一次性 1：每天 2：整点 3：间隔分钟 4：不限周期
			switch($creditRule["cycleType"]){
				case "0"://一次性
				{
					$insideCycle=false;
					$result=false;
				}
					break;
				case "1"://每天
				{
					//同一天
					if(startTime + 24 * 60 * 60 > curTime){		
						$insideCycle=true;
					}
					//不是同一天
					else{						
						$insideCycle=false;
					}
				}
					break;
				case "2"://整点
				{
					//判断是否在一个周期内
					if(startTime + $creditRule['cycleTime'] * 60 * 60 > curTime){
						$insideCycle=true;
					}
					//不在同一个周期内
					else{
						$insideCycle=false;
					}
				}
					break;
				case "3"://间隔分钟
				{
					//判断是否在一个周期内
					if(startTime + $creditRule['cycleTime'] * 60 > curTime){
						$insideCycle=true;
					}
					//不在同一个周期内
					else{
						$insideCycle=false;
					}
				}
					break;
				case "4"://不限周期
				{
					$insideCycle=true;
				}
					break;
			}
			//如果在周期内
			if($insideCycle){
				//去重
				if($this->getCheckCheating(&$creditLog,&$creditRule,$resourceId)){
					$result=false;
				}else{
					//周期内奖励次数未满，可以再奖励，若最多奖励次数为0，则表示无限次奖励
					if($creditRule['rewardNum']==0 || $creditLog['cycleNum']<$creditRule['rewardNum']){
						
						$creditLog['total']=$creditLog['total']+1;
						$creditLog['cycleNum']=$creditLog['cycleNum']+1;
						$creditLog['credit']=$creditRule['credit'];
						$creditLog['experience']=$creditRule['experience'];
						$creditLog['dateLine']=time()*1000;
						
						$result=true;
					}else{
						$result=false;
					}
				}
			}
			//若不在周期内
			if(!$insideCycle && "0"!=$creditRule["cycleType"]){
				//周期内清零
				$this->updateClearCheckCheating(&$creditLog,&$creditRule,$resourceId);
				
				$creditLog['total']=$creditLog['total']+1;
				$creditLog['cycleNum']=1;
				$creditLog['credit']=$creditRule['credit'];
				$creditLog['experience']=$creditRule['experience'];
				$creditLog['dateLine']=time()*1000;
				$creditLog['startTime']=time()*1000;
				
				$result=true;
				
				//如果不是同一天，则一定不会重复，调用该方法的目的是添加去重id
				$this->getCheckCheating(&$creditLog,&$creditRule,$resourceId);
			}
		}
		//惩罚
		else{
			$creditLog['total']=$creditLog['total']+1;
			$creditLog['cycleNum']=$creditLog['cycleNum']+1;
			$creditLog['credit']=$creditRule['credit']*(-1);
			$creditLog['experience']=$creditRule['experience']*(-1);
			$creditLog['dateLine']=time()*1000;
			
			$result=true;
		}
		
		return $result;
	}
	
	/**
	 * 周期初始化
	 */
	private function updateClearCheckCheating($creditLog,$creditRule,$resourceId){
		//无需去重
		if("0"==$creditRule['norepeat'])
			return;
			
		// 去重奖励:'0'无,'1'针对信息去掉重复,'2'针对用户去掉重复,'3'针对应用去重
		switch($creditRule["norepeat"]){
			case "1":
					$creditLog["infoids"]="";
				break;
			case "2":
					$creditLog["userids"]="";
				break;
			case "3":
					$creditLog["appids"]="";
				break;
		}
		
		$creditLog['cycleNum']=0;// 周期内次数清零
	}
	
	/**
	 * 非规则积分调用接口 如：悬赏积分
	 * 
	 * @param fromUid：积分送出者id
	 * @param toUid：积分接收者id
	 * @param action：积分事件，例如：悬赏积分
	 * @param credit：积分
	 * @param experience：经验值
	 * @return
	 * @throws Exception
	 */
	public function createCreditLogRandom($fromUid,$toUid,$action,$credit,$experience){
		global $tname_lt;
		$now=time()*1000;
				
		if(0==$toUid){
			throw new Exception("非规则积分接口调用出错了，原因是未传入toUid！");
		}
		if(""==$action){
			throw new Exception("非规则积分接口调用出错了，原因是未传入action！");
		}else{
			$action=iconv("UTF-8","gb2312", $action);
		}
		
		//初始化mssql数据库链接
		if(empty($this->mssql4zh)){
			$this->mssql4zh=new mssql4lt(); 
		}
		
		//保存接受者积分日志
		$toValues=array("uid"=>$toUid,"ruleid"=>'0',"action"=>$action,"total"=>1,"cycleNum"=>1,"credit"=>$credit,"experience"=>$experience,"startTime"=>$now,"dateLine"=>$now,"rewardType"=>"1");
		$this->mssql4zh->Insert($tname_lt['LTCREDIT_LOG'],$toValues);
		if($credit!=0){
			//更改用户总积分
			$update_to_user_total_credit="update common_user set credit=credit+".$credit." where id='".$toUid."'";
			$this->mssql4zh->Query($update_to_user_total_credit);
		}
			
		if(0!=$fromUid){
			//保存发送者积分日志
			$fromValues=array("uid"=>$fromUid,"ruleid"=>0,"action"=>$action,"total"=>1,"cycleNum"=>1,"credit"=>$credit*(-1),"experience"=>$experience*(-1),"startTime"=>$now,"dateLine"=>$now,"rewardType"=>"0");
			$this->mssql4zh->Insert($tname_lt['LTCREDIT_LOG'],$fromValues);
			if($credit!=0){
				//更改用户总积分
				$update_from_user_total_credit="update common_user set credit=credit-".$credit." where id='".$fromUid."'";
				echo $update_from_user_total_credit."<br/>";
				$this->mssql4zh->Query($update_from_user_total_credit);
			}
		}
		
		$this->mssql4zh->Close();
		$this->mssql4zh=null;
		return 	$credit;
	}
	
}


?>